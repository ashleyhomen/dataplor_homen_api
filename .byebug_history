c
ll
c
ll
c
ll
c
ll
c
ll
c
ll
c
result
node
id
bb
aa
aa = ancestors
aa
bb
aa
bb = node.ancestors
b
a
c
a
node.ancestors
node
b = node.ancestors
a = ancestors
a
      a = ancestors
      b = node.ancestors
c
result = data.first.symbolize_keys
      data = ActiveRecord::Base.connection.execute(
        ApplicationRecord.sanitize_sql([query, {id_a: id, id_b: node.id}])
      )
      query = <<-SQL
      WITH RECURSIVE parents_a AS (
          SELECT node.id, node.id as p_id, node.parent_id
          FROM nodes AS node
          UNION
          SELECT child.id, parent.id as p_id, parent.parent_id
          FROM parents_a AS child
          JOIN nodes AS parent ON (child.parent_id = parent.id)
      ),
      parents_b AS (
          SELECT node.id, node.id as p_id, node.parent_id
          FROM nodes AS node
          UNION
          SELECT child.id, parent.id as p_id, parent.parent_id
          FROM parents_b AS child
          JOIN nodes AS parent ON (child.parent_id = parent.id)
      ),
      ancestors_a AS (
        SELECT p.p_id as id
        FROM parents_a as p
        WHERE id = :id_a
      ),
      ancestors_b AS (
        SELECT p.p_id as id
        FROM parents_b as p
        WHERE id = :id_b
      ),
      shared AS (
        SELECT a.id
        FROM ancestors_a AS a
        JOIN ancestors_b AS b ON a.id = b.id
      ),
      leveled AS (
        SELECT s1.id,
        (SELECT count(*) FROM shared s2 WHERE s2.id <= s1.id) as rn
        FROM shared AS s1
      )
      SELECT
        COUNT(*) as depth,
        (SELECT id FROM leveled ORDER BY rn DESC LIMIT 1) as root_id,
        (SELECT id FROM leveled ORDER BY rn ASC LIMIT 1) as lowest_common_ancestor
        FROM leveled
      SQL
result = data.first.symbolize_keys
      data = ActiveRecord::Base.connection.execute(
        ApplicationRecord.sanitize_sql([query, {id_a: id, id_b: node.id}])
      )
ancestors
node.ancestors
node.node
node
ancestors
self
      x = ActiveRecord::Base.connection.execute(
        ApplicationRecord.sanitize_sql([full, {id_a: id, id_b: node.id}])
      ).first(100)
full = x
x = <<-SQL
      WITH RECURSIVE parents_a AS (
          SELECT node.id, node.id as p_id, node.parent_id
          FROM nodes AS node
          UNION
          SELECT child.id, parent.id as p_id, parent.parent_id
          FROM parents_a AS child
          JOIN nodes AS parent ON (child.parent_id = parent.id)
      ),
      parents_b AS (
          SELECT node.id, node.id as p_id, node.parent_id
          FROM nodes AS node
          UNION
          SELECT child.id, parent.id as p_id, parent.parent_id
          FROM parents_b AS child
          JOIN nodes AS parent ON (child.parent_id = parent.id)
      ),
      ancestors_a AS (
        SELECT p.p_id as id
        FROM parents_a as p
        WHERE id = :id_a
      ),
      ancestors_b AS (
        SELECT p.p_id as id
        FROM parents_b as p
        WHERE id = :id_b
      ),
      shared AS (
        SELECT a.id
        FROM ancestors_a AS a
        JOIN ancestors_b AS b ON a.id = b.id
      )
        SELECT s1.id,
        (SELECT count(*) FROM shared s2 WHERE s2.id <= s1.id) as rn
        FROM shared AS s1
      SQL
data.first
      data = ActiveRecord::Base.connection.execute(
        ApplicationRecord.sanitize_sql([query, {id_a: id, id_b: node.id}])
      )
self
c
@birds = Bird.birds_of_node_descendants(node_ids)
node_ids = params.expect(:node_ids).split(",")
Bird.birds_of_node_descendants(node_ids)
node_ids
c
node_ids
Bird.birds_of_node_descendants(node_ids)
node_ids = params.expect(:node_ids).split(",").map(&:to_i)
node_ids = params.expect(:node_ids).split(",")
Bird.birds_of_node_descendants(node_ids)
node_ids = params.expect(:node_ids).split(",")
params.expect(:node_ids)
c
params.expect(:node_ids)
c!
c
b_ancestors
a_ancestors
root != common
c
a_ancestors
c
ancestors
c
ancestors
c
ancestors
c
a_ancestors
c
a_ancestors
c
a_ancestors
c
a_ancestors
c
a_ancestors
c
a_ancestors
c
a_ancestors
c
b_ancestors
a_ancestors
c
root
common = b_ancestors[index]
depth = index + 1
index.nil?
range[:min] = mid
index = mid if b_ancestors[mid + 1] != a_ancestors[mid + 1]
b_ancestors[mid] == a_ancestors[mid]
mid = (range[:max] - range[:min]) / 2
index = nil
range = {min: 0, max: b_count - 1}
range[:max] = mid
b_ancestors[mid + 1] != a_ancestors[mid + 1] 
index = mid if b_ancestors[mid + 1] != a_ancestors[mid + 1] 
b_ancestors[mid]
b_ancestors
a_ancestors
a_ancestors[mid - 1] 
b_ancestors[mid - 1]
b_ancestors[mid - 1] != a_ancestors[mid - 1] 
b_ancestors[mid] == a_ancestors[mid]
mid = (range[:max] - range[:min]) / 2
range = {min: 0, max: b_count - 1}
mid = (range[:max] - range[:min]) / 2
(range[:max] - range[:min]) / 2
range[:max] - range[:min]
mid
mid = (range[:max] - range[:min])
puts "range: #{range}"
index.nil?
index = nil
range = {min: 0, max: b_count}
b_ancestors.last == a_ancestors[b_count - 1]
root != common
b_ancestors.last == a_ancestors[b_count - 1]
a_ancestors[b_count - 1]
b_ancestors.last == a_ancestors[b_count - 1]
a_ancestors
b_ancestors
root != common
common
root
depth
index
c
b_count + index
index
b_count.one?
b_count.zero?
b_count
b_count.count
b_count.one
b_count.one?
{root_id: root, lowest_common_ancestor: common}
        root = a_node
        depth = b_count + index
        common = b_node
c
b_ancestors.first
a_ancestors[0 - b_count]
0 - b_count
a_ancestors
b_count
a_ancestors.include?(b_ancestors.first)
a.ancestors.include?(b_ancestors.first)
index = b_count - a_count
index = b_count - a_count - 1
a_count
b_count
depth = b_count + index
b_ancestors
a_ancestors
b_ancestors, b_ancestors
a_ancestors
